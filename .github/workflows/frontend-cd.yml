name: Frontend Continuous Deployment
on:
  workflow_dispatch:

  push:
    branches:
    - main   
  
env:
  # Set Node.js Version
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1     # Update this to your AWS Region
  TF_ACTION_WORKING_DIR: 'terraform' # Update this to your Terraform files directory
  REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}


jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
       # cache: 'npm'

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
 
    # Run the linter
    -  name: Run the linter 
       run: |
        cd frontend && npm run lint   
   
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
    
    # Run the linter
    - name: Run the test 
      run: |
        cd frontend && npm run test   
                            
    # Run the tests.
    - run: |
       cd frontend && npm test

  build:  
   needs: [lint, test]     
   runs-on: ubuntu-latest

   steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
    
    # - name: Bump version and push tag
    #   id: tag_version
    #   uses: mathieudutour/github-tag-action@v6.1
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     release_branches: "main,develop"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 727364028313.dkr.ecr.us-east-1.amazonaws.com
          cd frontend/
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t frontend .
          docker tag frontend:latest 727364028313.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
          docker push 727364028313.dkr.ecr.us-east-1.amazonaws.com/frontend:latest

    - name: Install kubectl
      run: |
        curl -sLO https://storage.googleapis.com/kubernetes-release/release/v1.19.9/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/
    
    - name: Check kubectl version
      run: kubectl version --client

    - name: Display kubectl help
      run: kubectl help

    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Check Kustomize version
      run: kustomize version

    - name: Update AWS CLI
      run: |
        sudo apt-get install -y awscli
        aws --version
  
    - name: Add AWS EKS cluster to kubeconfig
      run: |
        # Specify AWS EKS cluster details
        AWS_REGION=us-east-1
        EKS_CLUSTER_NAME=cluster
        # Set the path for the kubeconfig file
        KUBECONFIG_PATH=/home/runner/.kube/config
        # Update kubeconfig with AWS EKS cluster
        aws eks --region us-east-1 update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig $KUBECONFIG_PATH
        
        # Display the updated kubeconfig content (optional, for verification)
        cat $KUBECONFIG_PATH
        cd frontend/k8s
        kustomize edit set image frontend=727364028313.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
        kustomize build | kubectl apply -f - --validate=false
      env:
        KUBECONFIG: /home/runner/.kube/config
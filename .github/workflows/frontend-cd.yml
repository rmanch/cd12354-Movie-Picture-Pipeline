name: Frontend Continuous Deployment
on:
  workflow_dispatch:

  push:
    branches:
    - main   
  
env:
  # Set Node.js Version
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1     # Update this to your AWS Region
  TF_ACTION_WORKING_DIR: 'terraform' # Update this to your Terraform files directory
  REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER_NAME: cluster
  #IMAGE_NAME: 'frontend'
  #AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}


jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
       # cache: 'npm'

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
 
    # Run the linter
    -  name: Run the linter 
       run: |
        cd frontend && npm run lint   
   
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
                            
    # Run the tests.
    - run: |
       cd frontend && npm test

  build:  
   needs: [lint, test]     
   runs-on: ubuntu-latest

   steps:
    - name: Check out repository
      uses: actions/checkout@v3

    # Set up a Node.js environment using the specified node version.
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    # Install the dependencies.
    - name: Install the dependencies
      run: |
        cd frontend && npm ci
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
        REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build --build-arg=REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL/"  -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Kubeconfig Auth
      run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy the Docker image to Amazon EKS
      env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
      run: |
          cd k8s
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide